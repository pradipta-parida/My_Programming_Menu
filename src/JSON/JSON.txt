> Reference - https://www.youtube.com/watch?v=0kHFDV1lAuI

> JSON = JavaScript Object Notation

> It is a Data-represenation format

> Used to communicate data across the web. Commonly used with APIs and Server in order to store and transform information.

> Compatible with most modern languages

> JSON Data Types (6 types);

Type                                            Examples

Numbers                                     3, -5, 1.7, 15000

Booleans                                    true, false

Strings                                     "hi", "John", "Insert Words"

Arrays                                      [1, 4, "HEllo"], ["hi","Yo"]
(which are used
to store collection of data,
instead of just one piece of data)

Objects                                     {"name":"joe", age:27}
(which are collection
of key-value pairs)

Null                                        null
(has one possible value and thats null,
basically just means that nothing
is there and its typiclly what we
use if we still want to have a piece
of data but just have it be empty)                                        


>  JSON file is represented as one big object. To make an object we need to use {}. And inside these curly brackets
   we can now specify key-value pairs with any of the possible data types as mentioned above.

>  To make a key we use "" and then inside of these we can name our key. To give that key a corresponding value we need to 
   use a colon : and then we can specify the value that we want 

>  Key-value pairs get separted by ,

>  Last key-value pair does not need , as it marks the end of it.

>  Arrays start with [] and can have any collection data type

>  Nested Objects - Object inside of a object is called nested Objects

>  There is another way of json format. This is making the base data type an array instead of an object (users.json)
   Now, within an array we could have anything separated by commas.

>  One of the common methods for using arrays is to store an array of unnamed objects. Because its an array we can have multiple
   entries

>  In, users.json file we have an array of three unique objects. One very important design principle that you may
   encounter is giving each object a unique ID. Notice that these objects are unnamed objects because we don't name
   data that is stored inside of an array. Also, multiple people could share the same name, so often you'll have some 
   unique Id for each object. so, often times you will see at the very top of an object like an Id field.  





