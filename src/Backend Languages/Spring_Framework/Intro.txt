> Spring is a java framework built to create an enterprise-ready application.It creates jar, properties and all packages
  for java/python related project. SpringBoot is a extension of Spring which allows developer to concerntrate on convention
  not the configuration part.

> Real Life Example:-
  Just imagine you have an idea to build an app and before writing any code that really does any business logic for your app you need to write and configure a lot of low level code such as servlets, security, database connectivity, dependency injection, logging and other important things. 
  Hard work and time consuming right!
  Spring Boot framework to the rescue. With Spring Boot you get can a Jetty server up and running in about 5 lines of code. Amazing right! This means that if you have any ideas, personal or university projects, Spring Boot allows you to get off the ground very quickly.

> Benefits of SpringBoot:
  . Security Module                             . Connecting to DB
  . Rapid application development               . Production Reay
  . Managing the dependencies                   . Metrics       
  . Auto-configuration                          . Easy to  Learn
  . Microservices
  . Dependency Injection

========================================================================================================================================================
> Maven is a build tool that helps in project management. The tools helps in building and documenting the project.
  The heart of maven project is in (pom.xml)

* Build Tool- It is essential for the process of building. It is needed for the following process;
              . Generating source code
              . Generating documentation of the source code
              . Compiling of source code
              . Packaging of compiled codes into JAR(JAR stands for Java ARchive).
                It's a file format based on the popular ZIP file format and is used 
                for aggregating many files into one) files
              . Installing the packaged code in local repository, server or central repository

> Maven is written in Java,C#,Scala,Ruby,etc. and is based on POM (Project Object Model).

* POM features;
   . POM is an XML file that has all the information regarding project and configuration details
   . When we tend to execute a task, Maven searches for the POM in the current directory

> The tool is used to build and manage any java based project, simplifies work for java developers.

> In Maven, while setting up a new maven project there is "Artifact Co-ordinates", which consists of;
    GroupId- represent the name of the company/domain(com.dell)/package name
    ArtifactId- represent the project name
    Package - combination of <GroupId> <ArtifactId>
    version-

> For dependencies/JAR file for your pom.xml we go to "mvnrepository", which is a central repository for
  all the JAR files.

> we dont have to be connected to internet for importing external dependencies. so, lets say if we are using
  spring 4.2.3.8 for the first time, it will get downloaded from the "remote repository". so, maven has a remote repository
  from where you get all the JAR files but it also has a local repositories. so, in our machine we will be having
  a local repository, so every time you ask for a dependency , now it will first search for local repository, if its not there
  then it will go to remote repository.

================================================================================================================================================

Maven Setup Guide;

> To check maven version and installation;
    Step-1 : Check if maven is already installed 
            Goto cmd and type --> mvn -version

    Step-2 : Download maven from internet
               https://maven.apache.org/download.cgi

    Step-3 : Extract the zip file

    Step-4 : Under System Variables --> New -->
       variable name : M2_HOME | variable value : C:\Users\prparida\Downloads\apache-maven-3.6.3 
       variable name : MAVEN_HOME | variable value : C:\Users\prparida\Downloads\apache-maven-3.6.3
       variable name : Path | variable value : C:\Program Files\Java\jdk1.8.0_251\bin;C:\Users\prparida\Downloads\apache-maven-3.6.3\bin;
                                                                          (OR)
                                               C:\Program Files\Java\jdk1.8.0_251\bin;%M2_HOME%\bin;

  * (;) --> To append the path variable value of java and maven, or appending any upcoming new versions.

    Step-5 : Check again if maven is installed

================================================================================================================================================================

> Dependency Injection - while working with objects , some objects are dependent on some other objects and we need
                         to achieve loose coupling

=================================================================================================================================================================

Demo Application Overview;

> We need to build the entire application(prototype attached as Appliaction_Image.jpg);
  . API Layer - will receive request such as GET, POST, DELETE, PUT 
  . Service Layer - mainly for business logic
  . Data Access Layer - responsible to connecting to any database

> From Client<->API Layer<->Service Layer<->Data Access Layer(DB)

================================================================================================================================================================

Default Project Structure Of STS;

> src/main/java/resources/application.properties - will have all the properties configured for our application 
                                                    as well as enviroment-specific properties(sit.uat,perf,prod)

> src/main/java/resources/static and templates - used while developing web developments such as 
                                                 working with HTML, CSS, JS etc..

> 