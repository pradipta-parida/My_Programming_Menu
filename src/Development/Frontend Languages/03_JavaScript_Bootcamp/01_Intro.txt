> Youtube Link - https://www.youtube.com/watch?v=W6NZfCO5SIk

> Javascript is the only language that can run in a browser.Javascript is a high-level-object oriented scripting language.
  Javascript builds on top of html.It was created by Bernard Eich at Netscape in 1995.

* Syntax- Like Grammar, rules for how each programming language is written.
* High-Level Programming Language - enables programmer to write programs that are more or less independent of a particular type of computer.
                                   Such languages are considered high-level because they are closer to human languages and further
                                   from machine languages.At the beginning you don't need to worry about how to allocate/re-allocate
                                   memory.
* Low-Level Programming Language - require little interpretation by the computer. This makes machine code fast compared to other programming languages.
                                  Low-level languages gives programmers more control over data storage, memory, and computer hardware. 
                                  Itâ€™s typically used to write kernel or driver software. It would not be used to write web applications or games.
* Object-Oriented Programming Language- a paradigm of programming in which you write code so that your code can reflect real world objects and scenarios
                                        such as people, person, events etc. This is really important because in enterprise level applications when you are 
                                        building applications for companies the common language that you use are going to be described these things in programming.
* Scripting Language- it was developed in order to write and to be written and be executed by the browser.Scripting languages are executed by some other programs
                      not by the operating system itself.

> There are two types of Web based Scripting Language;
    . Client side script -

    . Server side script -
                                                   
> Javascript has been loaded within HTML. sole purpose of manipulating web pages, adding content,removing content, animating things,changing the style etc.

> There are mainly 3 ways to write Javascript;
    . In-Line- the code you are writing is completely embedded in html. some small bit of code that only needs to run on a particular time or associated to
               a particular html element.

    . Script Tag - just as Html there is a style tag in which you can write css. Script tags allow you to write javascript code,when the browser sees the
                  script tag, it will take anything written inside the script tag 

    . Script File - similar to script tag, you can write script inside a file, give it .js extension which is a javascript file and you can embed it inside a browser.

> (;) is optional in an ending of a code, but it is recommended to have it as a standard/enterprise point of view.

> // This is an in-line comment.

  /* This is a
     multi-line comment. */


  In, VS code we can use ctrl + / to comment any code.

> var = keyword used for storing variable

> "user strict";   --> to strictly check for any javascript syntax error, as javascript is a very relaxed language (optional to use strict)

> JavaScript provides eight different data types which are undefined, null, boolean, string, symbol, bigint, number, and object.

> We tell JavaScript to create or declare a variable by putting the keyword "var" in front of it, like so:

  var ourName;

  Variable names can be made up of numbers, letters, and $ or _, but may not contain spaces or start with a number.

> In JavaScript, you can store a value in a variable with the assignment operator (=).

  myVariable = 5;

  This assigns the Number value 5 to myVariable.If there are any calculations to the right of the = operator, those are performed before the value is assigned to the variable on the left of the operator.

> It is common to initialize a variable to an initial value in the same line as it is declared.

  var myVar = 0;

> you can also declare a string variable like this:

  var myName = "your name";

  "your name" is called a string literal. A string literal, or string, is a series of zero or more characters enclosed in single or double quotes.

> When JavaScript variables are declared, they have an initial value of undefined. If you do a mathematical operation on an undefined variable your result will be NaN which means "Not a Number".
  If you concatenate a string with an undefined variable, you will get a string of undefined.

> In JavaScript all variables and function names are case-sensitive. This means that capitalization matters.  MYVAR is not the same as MyVar nor myvar. It is possible to have multiple distinct variables with the same name but different casing. It is strongly recommended that for the sake of clarity, you do not use this language feature.

  Best Practice
  -------------
  Write variable names in JavaScript in camelCase. In camelCase, multi-word variable names have the first word in lowercase and the first letter of each subsequent word is capitalized.

  Examples:

  var someVariable;
  var anotherVariableName;
  var thisVariableNameIsSoLong;

> If you replace "var" with "let" in the code above, it results in an error:

  let camper = "James";
  let camper = "David";

  So unlike var, when you use let, a variable with the same name can only be declared once.

> "const" has all the awesome features that let has, with the added bonus that variables declared using const are read-only. They are a constant value, which means that once a variable is assigned with const, it cannot be reassigned:
  we should use uppercase variable identifiers.

  const FAV_PET = "Cats";
  FAV_PET = "Dogs";

> JavaScript uses the + symbol as an addition operator when placed between two numbers.

  Example:

  const myVar = 5 + 10;

> JavaScript uses the - symbol for subtraction.

  Example

  const myVar = 12 - 6;
  myVar would have the value 6.

> JavaScript uses the * symbol for multiplication of two numbers.

  Example

  const myVar = 13 * 13;
  myVar would have the value 169.

> JavaScript uses the / symbol for division.

  Example

  const myVar = 16 / 2;
  myVar now has the value 8.

> You can easily increment or add one to a variable with the ++ operator.

  i++;
  is the equivalent of

  i = i + 1;
  Note: The entire line becomes i++;, eliminating the need for the equal sign.

> You can easily decrement or decrease a variable by one with the -- operator.

  i--;
  is the equivalent of

  i = i - 1;
  Note: The entire line becomes i--;, eliminating the need for the equal sign.

> We can store decimal numbers in variables too. Decimal numbers are sometimes referred to as floating point numbers or floats.

> The remainder operator % gives the remainder of the division of two numbers.

  Example

  5 % 2 = 1 because
  Math.floor(5 / 2) = 2 (Quotient)
  2 * 2 = 4
  5 - 4 = 1 (Remainder)

  In mathematics, a number can be checked to be even or odd by checking the remainder of the division of the number by 2.
  17 % 2 = 1 (17 is Odd)
  48 % 2 = 0 (48 is Even)
  Note: The remainder operator is sometimes incorrectly referred to as the modulus operator. It is very similar to modulus, but does not work properly with negative numbers.

> In programming, it is common to use assignments to modify the contents of a variable. Remember that everything to the right of the equals sign is evaluated first, so we can say:

myVar = myVar + 5;
to add 5 to myVar. Since this is such a common pattern, there are operators which do both a mathematical operation and assignment in one step.

One such operator is the += operator.

let myVar = 1;
myVar += 5;
console.log(myVar);
6 would be displayed in the console.

> Like the += operator, -= subtracts a number from a variable.

  myVar = myVar - 5;
  will subtract 5 from myVar. This can be rewritten as:

  myVar -= 5;

> The *= operator multiplies a variable by a number.

  myVar = myVar * 5;
  will multiply myVar by 5. This can be rewritten as:

  myVar *= 5;

> The /= operator divides a variable by another number.

  myVar = myVar / 5;
  Will divide myVar by 5. This can be rewritten as:

  myVar /= 5;

> When you are defining a string you must start and end with a single or double quote. What happens when you need a literal quote: " or ' inside of your string?

  In JavaScript, you can escape a quote from considering it as an end of string quote by placing a backslash (\) in front of the quote.

  const sampleStr = "Alan said, \"Peter is learning JavaScript\".";

  This signals to JavaScript that the following quote is not the end of the string, but should instead appear inside the string. 
  So if you were to print this to the console, you would get:

  Alan said, "Peter is learning JavaScript".

> String values in JavaScript may be written with single or double quotes, as long as you start and end with the same type of quote.
  Unlike some other programming languages, single and double quotes work the same in JavaScript.

  const doubleQuoteStr = "This is a string"; 
  const singleQuoteStr = 'This is also a string';

> Code	Output
  \'	single quote
  \"	double quote
  \\	backslash
  \n	newline
  \r	carriage return
  \t	tab
  \b	word boundary
  \f	form feed
  Note that the backslash itself must be escaped in order to display as a backslash.
  
  For e.g;
  const myStr = "FirstLine\n\t\\SecondLine\nThirdLine";

  FirstLine
    \SecondLine
  ThirdLine

> In JavaScript, when the + operator is used with a String value, it is called the concatenation operator. 
  You can build a new string out of other strings by concatenating them together.

  Example

  'My name is Alan,' + ' I concatenate.'
  Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

  Example:

  const ourStr = "I come first. " + "I come second.";
  The string I come first. I come second. would be displayed in the console.

> We can also use the += operator to concatenate a string onto the end of an existing string variable. This can be very helpful to break a long string over several lines.

  Note: Watch out for spaces. Concatenation does not add spaces between concatenated strings, so you'll need to add them yourself.

  Example:

  let ourStr = "I come first. ";
  ourStr += "I come second.";
  ourStr now has a value of the string I come first. I come second.

> Sometimes you will need to build a string. By using the concatenation operator (+), you can insert one or more variables into a string you're building.

  Example:

  const ourName = "freeCodeCamp";
  const ourStr = "Hello, our name is " + ourName + ", how are you?";
  ourStr would have a value of the string Hello, our name is freeCodeCamp, how are you?.

> Just as we can build a string over multiple lines out of string literals, we can also append variables to a string using the plus equals (+=) operator.

  Example:

  const anAdjective = "awesome!";
  let ourStr = "freeCodeCamp is ";
  ourStr += anAdjective;
  ourStr would have the value freeCodeCamp is awesome!.

> You can find the length of a String value by writing .length after the string variable or string literal.

  console.log("Alan Peter".length);
  The value 10 would be displayed in the console. Note that the space character between "Alan" and "Peter" is also counted.

  For example, if we created a variable const firstName = "Ada", we could find out how long the string Ada is by using the firstName.length property.

> Use Bracket Notation to Find the First Character in a String
  Bracket notation is a way to get a character at a specific index within a string.

  Most modern programming languages, like JavaScript, don't start counting at 1 like humans do. 
  They start at 0. This is referred to as Zero-based indexing.

  For example, the character at index 0 in the word Charles is C. So if const firstName = "Charles", you can get the value of the first letter of the string by using firstName[0].

  Example:

  const firstName = "Charles";
  const firstLetter = firstName[0];
  firstLetter would have a value of the string C.

> In JavaScript, String values are immutable, which means that they cannot be altered once created.

  For example, the following code:

  let myStr = "Bob";
  myStr[0] = "J";
  cannot change the value of myStr to Job, because the contents of myStr cannot be altered. Note that this does not mean that myStr cannot be changed, just that the individual characters of a string literal cannot be changed. The only way to change myStr would be to assign it with a new string, like this:

  let myStr = "Bob";
  myStr = "Job";

> Use Bracket Notation to Find the Nth Character in a String
  You can also use bracket notation to get the character at other positions within a string.

  Remember that computers start counting at 0, so the first character is actually the zeroth character.

  Example:

  const firstName = "Ada";
  const secondLetterOfFirstName = firstName[1];
  secondLetterOfFirstName would have a value of the string d.

> Use Bracket Notation to Find the Last Character in a String
  In order to get the last letter of a string, you can subtract one from the string's length.

  For example, if const firstName = "Ada", you can get the value of the last letter of the string by using firstName[firstName.length - 1].

  Example:

  const firstName = "Ada";
  const lastLetter = firstName[firstName.length - 1];
  lastLetter would have a value of the string a.

> Use Bracket Notation to Find the Nth-to-Last Character in a String
  You can use the same principle we just used to retrieve the last character in a string to retrieve the Nth-to-last character.

  For example, you can get the value of the third-to-last letter of the const firstName = "Augusta" string by using firstName[firstName.length - 3]

  Example:

  const firstName = "Augusta";
  const thirdToLastLetter = firstName[firstName.length - 3];
  thirdToLastLetter would have a value of the string s.

> const myNoun = "dog";
  const myAdjective = "big";
  const myVerb = "ran";
  const myAdverb = "quickly";
  const wordBlanks = "The " + myAdjective + " " + myNoun + " " + myVerb + " " + myAdverb + ".";
  // The big dog ran quickly .

> Store Multiple Values in one Variable using JavaScript Arrays
  With JavaScript array variables, we can store several pieces of data in one place.

  You start an array declaration with an opening square bracket, end it with a closing square bracket, and put a comma between each entry, like this:

  const sandwich = ["peanut butter", "jelly", "bread"];

> Nest one Array within Another Array. 
  You can also nest arrays within other arrays, like below:

  const teams = [["Bulls", 23], ["White Sox", 45]];
  This is also called a multi-dimensional array.

> Access Array Data with Indexes
  We can access the data inside arrays using indexes.

  Array indexes are written in the same bracket notation that strings use, except that instead of specifying a character, they are specifying an entry in the array.
  Like strings, arrays use zero-based indexing, so the first element in an array has an index of 0.

  Example

  const array = [50, 60, 70];
  console.log(array[0]);
  const data = array[1];
  The console.log(array[0]) prints 50, and data has the value 60.

> Modify Array Data With Indexes
  Unlike strings, the entries of arrays are mutable and can be changed freely, even if the array was declared with const.

  Example

  const ourArray = [50, 40, 30];
  ourArray[0] = 15;
  ourArray now has the value [15, 40, 30].

  Note: There shouldn't be any spaces between the array name and the square brackets, like array [0].
        Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

> Access Multi-Dimensional Arrays With Indexes
  One way to think of a multi-dimensional array, is as an array of arrays.
  When you use brackets to access your array, the first set of brackets refers to the entries in the outer-most (the first level) array, and each additional pair of brackets refers to the next level of entries inside.

  Example

  const arr = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
    [[10, 11, 12], 13, 14]
  ];

  arr[3];
  arr[3][0];
  arr[3][0][1];

  arr[3] is [[10, 11, 12], 13, 14], arr[3][0] is [10, 11, 12], and arr[3][0][1] is 11.

  Note: There shouldn't be any spaces between the array name and the square brackets, like array [0][0] and even this array [0] [0] is not allowed. Although JavaScript is able to process this correctly, this may confuse other programmers reading your code.

> Manipulate Arrays With push()
  An easy way to append data to the end of an array is via the push() function.

  .push() takes one or more parameters and "pushes" them onto the end of the array.

  Examples:

  const arr1 = [1, 2, 3];
  arr1.push(4);

  const arr2 = ["Stimpson", "J", "cat"];
  arr2.push(["happy", "joy"]);
  arr1 now has the value [1, 2, 3, 4] and arr2 has the value ["Stimpson", "J", "cat", ["happy", "joy"]].

> Another way to change the data in an array is with the .pop() function.

  .pop() is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable.
  In other words, .pop() removes the last element from an array and returns that element.

  Any type of entry can be popped off of an array - numbers, strings, even nested arrays.

  const threeArr = [1, 4, 6];
  const oneDown = threeArr.pop();
  console.log(oneDown);
  console.log(threeArr);
  The first console.log will display the value 6, and the second will display the value [1, 4].

> pop() always removes the last element of an array. What if you want to remove the first?

  That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.

  Example:

  const ourArray = ["Stimpson", "J", ["cat"]];
  const removedFromOurArray = ourArray.shift();
  removedFromOurArray would have a value of the string Stimpson, and ourArray would have ["J", ["cat"]].

> Manipulate Arrays With unshift()
  Not only can you shift elements off of the beginning of an array, you can also unshift elements to the beginning of an array i.e. add elements in front of the array.

  .unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.

  Example:

  const ourArray = ["Stimpson", "J", "cat"];
  ourArray.shift();
  ourArray.unshift("Happy");
  After the shift, ourArray would have the value ["J", "cat"]. 
  After the unshift, ourArray would have the value ["Happy", "J", "cat"].

> Shopping List
  Create a shopping list in the variable myList. The list should be a multi-dimensional array containing several sub-arrays.

  The first element in each sub-array should contain a string with the name of the item. The second element should be a number representing the quantity i.e.

  ["Chocolate Bar", 15]
  There should be at least 5 sub-arrays in the list.
  e.g;
  const myList = [["as",1],["sd",2],["df",3],["fg",4],["gh",5]];

> Write Reusable JavaScript with Functions
  In JavaScript, we can divide up our code into reusable parts called functions.

  Here's an example of a function:

  function functionName() {
    console.log("Hello World");
  }
  You can call or invoke this function by using its name followed by parentheses, like this: functionName(); Each time the function is called it will print out the message Hello World on the dev console.
  All the code between the curly braces will be executed every time the function is called.
  
  // Define the function
    function reusableFunction() {
    console.log("Hi World");
    }
 // Call the function
    reusableFunction();

> Passing Values to Functions with Arguments
  Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. 
  When a function is defined, it is typically defined along with one or more parameters.
  The actual values that are input (or "passed") into a function when it is called are known as arguments.

  Here is a function with two parameters, param1 and param2:

  function testFun(param1, param2) {
    console.log(param1, param2);
  }
  Then we can call testFun like this: testFun("Hello", "World");. We have passed two string arguments, Hello and World.
  Inside the function, param1 will equal the string Hello and param2 will equal the string World.

  Note:- that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.
  
  function functionWithArgs(param1,param2){
  console.log(param1+param2);  
  }
  functionWithArgs(1,2);
  functionWithArgs(7,9);

> Return a Value from a Function with Return
  We can pass values into a function with arguments. You can use a return statement to send a value back out of a function.

  Example

  function plusThree(num) {
    return num + 3;
  }

  const answer = plusThree(5);
  answer has the value 8.

  plusThree takes an argument for num and returns a value equal to num + 3.

> Global Scope and Functions
  In JavaScript, scope refers to the visibility of variables. Variables which are defined outside of a function block have Global scope.
  This means, they can be seen everywhere in your JavaScript code.

  Variables which are declared without the let or const keywords are automatically created in the global scope.
  This can create unintended consequences elsewhere in your code or when running a function again. You should always declare your variables with let or const.

> Local Scope and Functions
  Variables which are declared within a function, as well as the function parameters, have local scope. 
  That means they are only visible within that function.

  Here is a function myTest with a local variable called loc.

  function myTest() {
    const loc = "foo";
    console.log(loc);
  }

  myTest();
  console.log(loc);
  The myTest() function call will display the string foo in the console. 
  The console.log(loc) line (outside of the myTest function) will throw an error, as loc is not defined outside of the function.

> Global vs. Local Scope in Functions
  It is possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.

  In this example:

  const someVar = "Hat";

  function myFun() {
    const someVar = "Head";
    return someVar;
  }
  The function myFun will return the string Head because the local version of the variable is present.

> Understanding Undefined Value returned from a Function
  A function can include the return statement but it does not have to. 
  In the case that the function doesn't have a return statement, when you call it, the function processes the inner code but the returned value is undefined.

  Example

  let sum = 0;

  function addSum(num) {
    sum = sum + num;
  }

  addSum(3);

  addSum is a function without a return statement.
  The function will change the global sum variable but the returned value of the function is undefined.

> Assignment with a Returned Value
  If you'll recall from our discussion of Storing Values with the Assignment Operator, everything to the right of the equal sign is resolved before the value is assigned.
  This means we can take the return value of a function and assign it to a variable.

  Assume we have pre-defined a function sum which adds two numbers together, then:

  ourSum = sum(5, 12);
  will call the sum function, which returns a value of 17 and assigns it to the ourSum variable.

> Stand in Line
  In Computer Science a queue is an abstract Data Structure where items are kept in order.
  New items can be added at the back of the queue and old items are taken off from the front of the queue.

> 